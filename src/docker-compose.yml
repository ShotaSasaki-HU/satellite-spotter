# frontendのビルドと起動，backendのビルドと起動，dbの起動を全て担う．

services:
  # APIサーバーの定義
  api:
    build: ./backend # backend/Dockerfileを使ってビルド
    ports:
      - "8080:80" # PCの8080番をコンテナの80番に接続
    volumes:
      - ./backend:/app # ソースコードの同期
      - ${LOCAL_DATA_ROOT}:/data # PCの外付けSSDのパスをコンテナ内の/dataディレクトリとしてマウント
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - LOCAL_DATA_ROOT=/data # コンテナ内でのデータルートパスを環境変数として上書き
      - S3_BUCKET=${S3_BUCKET}
      - OPEN_METEO_CONCURRENCY_LIMIT
    depends_on:
      - db # dbサービスが起動してからapiサービスを起動する．
  
  # データベースの定義
  db:
    image: postgis/postgis:15-3.4 # PostGIS同梱版イメージ
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # DBデータを永続化
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432" # PCの5432番をコンテナの5432番に接続（DBクライアント用）
  
  # Webサーバー（フロントエンド）（将来的に追加）

volumes:
  postgres_data:
