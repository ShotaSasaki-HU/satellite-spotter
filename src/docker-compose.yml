# frontendのビルドと起動，backendのビルドと起動，dbの起動を全て担う．

services:
  # APIサーバーの定義
  api:
    build: ./backend/api # backend/api/Dockerfileを使ってビルド
    ports:
      - "8080:80" # PCの8080番をコンテナの80番に接続
    volumes:
      - ./backend/api:/app # ソースコードの同期
      - ${LOCAL_DATA_ROOT}:/data # PCの外付けSSDのパスをコンテナ内の/dataディレクトリとしてマウント
      - ~/.aws:/root/.aws
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOCAL_DATA_ROOT=/data # コンテナ内でのデータルートパスを環境変数として上書き
      - AWS_PROFILE=${AWS_PROFILE}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - TLE_STARLINK_KEY=${TLE_STARLINK_KEY}
      - TLE_STATIONS_KEY=${TLE_STATIONS_KEY}
      - DEM_FOLDER_KEY=${DEM_FOLDER_KEY}
      - WORLD_ATLAS_KEY=${WORLD_ATLAS_KEY}
      - SQM_MIN
      - SQM_MAX
      - OPEN_METEO_CONCURRENCY_LIMIT
    # depends_on:
    #   - db # dbサービスが起動してからapiサービスを起動する．
  
  # Lambdaワーカー
  worker:
    build: ./backend/worker
    platform: linux/amd64
    ports:
      - "9000:8080" # ローカルPCの9000番をコンテナの8080番に接続
    volumes:
      - ~/.aws:/root/.aws
      - ./backend/worker:/var/task:ro
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - DYNAMODB_TABLE_NAME=${DYNAMODB_TABLE_NAME}
      - AWS_PROFILE=${AWS_PROFILE}
  
  # ローカルデータベースの定義
  # db:
  #   image: postgis/postgis:15-3.4 # PostGIS同梱版イメージ
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data/ # DBデータを永続化
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #   ports:
  #     - "5432:5432" # PCの5432番をコンテナの5432番に接続（DBクライアント用）
  
  # Webサーバー（フロントエンド）（将来的に追加）

volumes:
  postgres_data:
